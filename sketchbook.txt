#
# TESTING
# IEEE 829 test plan structure
#

Test plan identifier
Introduction
Test items
Features to be tested
Features not to be tested
Approach
Item pass/fail criteria
Suspension criteria and resumption requirements
Test deliverables
Testing tasks
Environmental needs
Responsibilities
Staffing and training needs
Schedule
Risks and contingencies
Approvals



docker run -it --rm --user "$(id -u):$(id -g)" -v /etc/passwd:/etc/passwd:ro postgres
docker run --name some-postgres -e POSTGRES_PASSWORD=mysecretpassword -d postgres




Alternatively, you can just mount a volume to /docker-entrypoint-initdb.d/ that contains all your DDL scripts. You can put in *.sh, *.sql, or *.sql.gz files and it will take care of executing those on start-up.

e.g. (assuming you have your scripts in /tmp/my_scripts)

docker run -v /tmp/my_scripts:/docker-entrypoint-initdb.d postgres



docker images |grep -v REPOSITORY|awk '{print $1}'|xargs -L1 docker pull 

find . -mindepth 1 -maxdepth 1 -type d -print -exec git -C {} pull \;








#IEEE 829-2008, also known as the 829 Standard for Software and System Test Documentation, is an IEEE standard that specifies the form of a set of documents for use in eight defined stages of software testing and system testing, each stage potentially producing its own separate type of document. The standard specifies the format of these documents, but does not stipulate whether they must all be produced, nor does it include any criteria regarding adequate content for these documents. These are a matter of judgment outside the purview of the standard.

The documents are:

Master Test Plan (MTP):
# The purpose of the Master Test Plan (MTP) is to provide an overall test planning and test management document for multiple levels of test (either within one project or across multiple projects).
Level Test Plan (LTP): 
# For each LTP the scope, approach, resources, and schedule of the testing activities for its specified level of testing need to be described. The items being tested, the features to be tested, the testing tasks to be performed, the personnel responsible for each task, and the associated risk(s) need to be identified.
Level Test Design (LTD): 
# Detailing test cases and the expected results as well as test pass criteria.
Level Test Case (LTC): Specifying the test data for use in running the test cases identified in the Level Test Design.
Level Test Procedure (LTPr): Detailing how to run each test, including any set-up preconditions and the steps that need to be followed.
Level Test Log (LTL): To provide a chronological record of relevant details about the execution of tests, e.g. recording which tests cases were run, who ran them, in what order, and whether each test passed or failed.
Anomaly Report (AR): To document any event that occurs during the testing process that requires investigation. This may be called a problem, test incident, defect, trouble, issue, anomaly, or error report. This document is deliberately named as an anomaly report, and not a fault report. The reason is that a discrepancy between expected and actual results can occur for a number of reasons other than a fault in the system. These include the expected results being wrong, the test being run incorrectly, or inconsistency in the requirements meaning that more than one interpretation could be made. The report consists of all details of the incident such as actual and expected results, when it failed, and any supporting evidence that will help in its resolution. The report will also include, if possible, an assessment of the impact of an incident upon testing.
Level Interim Test Status Report (LITSR): To summarize the interim results of the designated testing activities and optionally to provide evaluations and recommendations based on the results for the specific test level.
Level Test Report (LTR): To summarize the results of the designated testing activities and to provide evaluations and recommendations based on the results after test execution has finished for the specific test level.
Master Test Report (MTR): To summarize the results of the levels of the designated testing activities and to provide evaluations based on these results. This report may be used by any organization using the MTP. A management report providing any important information uncovered by the tests accomplished, and including assessments of the quality of the testing effort, the quality of the software system under test, and statistics derived from Anomaly Reports. The report also records what testing was done and how long it took, in order to improve any future test planning. This final document is used to indicate whether the software system under test is fit for purpose according to whether or not it has met acceptance criteria defined by project stakeholders.








# Status 	Definition
# Proposed 	The requirement has been requested by an authorized source.
# In Progress 	A business analyst is actively working on crafting the requirement.
# Drafted 	The initial version of the requirement has been written.
# Approved 	The requirement has been analyzed, its impact on the project has been estimated, and it has been allocated to the baseline for a specific release. The key stakeholders have agreed to incorporate the requirement, and the software development group has committed to implement it.
# Implemented 	The code that implements the requirement has been designed, written, and unit tested. The requirement has been traced to the pertinent design and code elements. Itâ€™s now ready for review or other verification.
# Verified 	The requirement has satisfied its acceptance criteria, meaning that the correct functioning of the implemented requirement has been confirmed. The requirement has been traced to pertinent tests. It is now considered complete.
# Deferred 	An approved requirement is now planned for implementation in a later release.
# Deleted 	An approved requirement has been removed from the baseline. Include an explanation of why and by whom the decision was made to delete it.
# Rejected 	The requirement was proposed but was never approved and is not planned for implementation in any upcoming release. Include an explanation of why and by whom the decision was made to reject it.
# requirement = Table('requirement', metadata,
#                                 Column('id', BigInteger, primary_key=True),
#                                 Column('pref_id', BigInteger, primary_key=True),
#                                 Column('serv_id', BigInteger, ForeignKey('service.id"), nullable=False),
#                                 Column('name', String(40), nullable=False),
#                                 Column('status', Enum('proposed', 'in_progress', 'drafted', 'approved',
#                                 'implemented', 'verified', 'deffered', 'deleted', 'rejected'), default='inactive', nullable=False),
#                                 Column('first_response', String(10), nullable=False),
#                                 Column('time_to_solve', String(10), nullable=False),
#                                 Column('description', String(40), nullable=False),
#                                 Column('last_update', String(40), nullable=False)
#                                 )

# issue = Table('issue', metadata,
#                                 Column('id', BigInteger, primary_key=True),
#                                 Column('pref_id', BigInteger, primary_key=True),
#                                 Column('serv_id', BigInteger, ForeignKey('service.id"), nullable=False),
#                                 Column('name', String(40), nullable=False),
#                                 Column('status', Enum('inactive', 'active', 'resolved', 'breached'), default='inactive', nullable=False),
#                                 Column('first_response', String(10), nullable=False),
#                                 Column('time_to_solve', String(10), nullable=False),
#                                 Column('description', String(40), nullable=False),
#                                 Column('last_update', String(40), nullable=False)
#                                 )

# defect = Table('defect', metadata,
#                                 Column('id', BigInteger, primary_key=True),
#                                 Column('pref_id', BigInteger, primary_key=True),
#                                 Column('serv_id', BigInteger, ForeignKey('service.id"), nullable=False),
#                                 Column('name', String(40), nullable=False),
#                                 Column('status', Enum('inactive', 'active', 'resolved', 'breached'), default='inactive', nullable=False),
#                                 Column('first_response', String(10), nullable=False),
#                                 Column('time_to_solve', String(10), nullable=False),
#                                 Column('description', String(40), nullable=False),
#                                 Column('last_update', String(40), nullable=False)
#                                 )


# test = Table('test', metadata,
#                                 Column('id', BigInteger, primary_key=True),
#                                 Column('pref_id', BigInteger, primary_key=True),
#                                 Column('serv_id', BigInteger, ForeignKey('service.id"), nullable=False),
#                                 Column('name', String(40), nullable=False),
#                                 Column('status', Enum('inactive', 'active', 'resolved', 'breached'), default='inactive', nullable=False),
#                                 Column('first_response', String(10), nullable=False),
#                                 Column('time_to_solve', String(10), nullable=False),
#                                 Column('description', String(40), nullable=False),
#                                 Column('last_update', String(40), nullable=False)
#                                 )

# project_plan = Table('project_plan', metadata,
#                                 Column('id', BigInteger, primary_key=True),
#                                 Column('pref_id', BigInteger, primary_key=True),
#                                 Column('serv_id', BigInteger, ForeignKey('service.id"), nullable=False),
#                                 Column('name', String(40), nullable=False),
#                                 Column('status', Enum('inactive', 'active', 'resolved', 'breached'), default='inactive', nullable=False),
#                                 Column('first_response', String(10), nullable=False),
#                                 Column('time_to_solve', String(10), nullable=False),
#                                 Column('description', String(40), nullable=False),
#                                 Column('last_update', String(40), nullable=False)
#                                 )


# project_task = Table('project_task', metadata,
#                                 Column('id', BigInteger, primary_key=True),
#                                 Column('pref_id', BigInteger, primary_key=True),
#                                 Column('serv_id', BigInteger, ForeignKey('service.id"), nullable=False),
#                                 Column('name', String(40), nullable=False),
#                                 Column('status', Enum('proposed', 'in_progress', 'drafted', 'approved',
#                                 'implemented', 'verified', 'deffered', 'deleted', 'rejected'), default='inactive', nullable=False),
#                                 Column('first_response', String(10), nullable=False),
#                                 Column('time_to_solve', String(10), nullable=False),
#                                 Column('description', String(40), nullable=False),
#                                 Column('last_update', String(40), nullable=False)
#                                 )     